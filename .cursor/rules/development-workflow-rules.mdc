---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
# 開発プロセスルール

## 1. タスク管理ワークフロー

### 1.1 タスク着手前のチェックリスト
- [ ] Githubで自分がアサインしているissueを確認し、タスクの全容を理解
- [ ] 関連する既存コードのレビュー
- [ ] 必要なドキュメントの確認
- [ ] 実装方針の決定
- [ ] 作業ブランチの作成

### 1.2 開発中のチェックポイント
- 機能単位でのコミット
- 定期的なテスト実行
- コメントの追加
- 既存コードとの一貫性の確保

### 1.3 実装完了前の確認事項
- [ ] すべての要件が実装されていることを確認
- [ ] テストが追加され、全テストが成功
- [ ] コードの品質チェック（`npx tsc --noEmit`、`npm run build`を実行して、修正が必要な場合は修正する）
- [ ] ドキュメントの更新（必要であれば更新）

## 2. コードレビューのためのガイドライン

### 2.1 コードレビュー依頼時の情報
- どのようなアプローチで実装したか
- 特に注意して見てほしい箇所（ない場合は書かなくて良い）
- 悩んだポイントや代替案（ない場合は書かなくて良い）
- 参考にしたドキュメントやソース

### 2.2 コードレビューのフィードバック対応
- フィードバックごとにコミットを分ける
- 修正内容とフィードバックの対応関係を明示
- 対応できない項目は理由を説明

## 3. デバッグと問題解決

### 3.1 問題の切り分け手順
1. 問題の症状を正確に特定
2. 再現手順を確立
3. ログやエラーメッセージを確認
4. 問題箇所を特定
5. 仮説を立てて検証

### 3.2 デバッグ情報の記録
デバッグ中に発見した情報は、以下の形式でissueのコメントに残しておくこと：

```typescript
/**
 * DEBUG_NOTE: 
 * 問題: ユーザーリストが表示されない
 * 原因: APIレスポンスの型が変更されていた
 * 解決策: 型定義を更新し、マッピング関数を修正
 * 参考: APIドキュメント v2.0 (2023-05-10更新)
 */
```

### 3.3 よくある問題と解決策
- 型エラー: 型定義の更新またはアサーションの使用
- APIエラー: トークンの確認、エンドポイントのバージョン確認
- パフォーマンス問題: メモ化、不要な再レンダリングの削減
- スタイル崩れ: レスポンシブ対応、CSSの詳細度の確認
