---
description: 
globs: 
alwaysApply: true
---
---
description: 
globs: 
alwaysApply: true
---
## 1. issue確認プロセス

### 1.1 issueの確認コマンド
```bash
# 特定のissueの詳細を表示
gh issue view ISSUE_NUMBER

# 自分にアサインされたissueの一覧を表示
gh issue list --assignee @me

# 特定のラベルが付いたissueの一覧を表示
gh issue list --label "priority:high"
```

### 1.2 issue内容のCursorへの取り込み
issue内容を確認したら、実装前に以下の手順を行うことを推奨します：

1. issue番号とタイトルをコメントとして該当ファイルの先頭に追加
2. issueの詳細情報を対応箇所の直前にコメントとして追加
3. TODOコメントとしてissueの主要タスクを列挙

```typescript
/**
 * Issue #123: ログイン機能の実装
 * 
 * 詳細: 
 * - ユーザー名とパスワードを使用した認証機能
 * - エラーハンドリングの実装
 * - セッション管理の実装
 * 
 * @link https://github.com/org/repo/issues/123
 */

// TODO: フォームのバリデーション実装
// TODO: APIとの連携実装
// TODO: エラーハンドリング実装
```

## 2. コードレビューとPR作成

### 2.1 コミット命名規則
<type>(<scope>): <subject>

例:
feat(auth): ログイン機能の実装
fix(form): バリデーションエラーの修正
docs(readme): インストール手順の更新


type のカテゴリ:
- feat: 新機能
- fix: バグ修正
- docs: ドキュメントのみの変更
- style: コードの意味に影響を与えない変更（空白、フォーマットなど）
- refactor: バグ修正でも機能追加でもないコード変更
- perf: パフォーマンスを向上させるコード変更
- test: 不足しているテストの追加や既存のテストの修正
- chore: ビルドプロセスやツールの変更

### 2.2 PR作成テンプレート
PRを作成する際は、以下の情報を含めることを推奨します：

```markdown
## 概要
<!-- 変更内容の簡潔な説明 -->

## 関連issue
<!-- 関連するissueへのリンク -->
Closes #123

## 変更内容
<!-- 具体的な変更内容のリスト -->
- ログインフォームの実装
- バリデーションロジックの追加
- エラーメッセージの表示機能

## テスト項目
<!-- テスト済みの項目 -->
- [ ] 正常なログイン処理
- [ ] 不正な入力に対するバリデーション
- [ ] エラーメッセージの表示

## スクリーンショット（必要な場合）
<!-- UI変更がある場合はスクリーンショットを追加 -->

## 特記事項
<!-- レビュアーへの注意点や相談事項 -->
```

### 2.3 PR作成コマンド
```bash
# ブランチを作成してcheckout
git checkout -b feature/issue-123

# 変更をcommit
git add .
git commit -m "feat(auth): ログイン機能の実装"

# PRを作成
gh pr create --title "feat(auth): ログイン機能の実装" --body-file .github/PR_TEMPLATE.md
```

### 2.4 PRの説明を更新するコマンド
```bash
# PR番号を指定して説明を更新（改行を含む場合）
gh pr edit <PR番号> --body $'## 変更内容\n- 項目1\n- 項目2\n\n## レビュー項目\n- 確認ポイント1\n- 確認ポイント2'

# 例: PR #133の説明を更新
gh pr edit 133 --body $'## 変更内容\n- My Pageドキュメントの新規追加\n- ドキュメント構造の更新と依存関係の修正\n\n## レビュー項目\n- ドキュメント間の依存関係が正しく設定されているか'

# 説明をファイルから読み込む場合
gh pr edit <PR番号> --body-file <ファイルパス>
```

ANSI-C クオート（$'...'）構文を使用することで、\nをエスケープシーケンスとして解釈させ、１行のコマンドで複数行の説明文を設定できます。これにより、Cursorなどの環境で改行を含むコマンドを実行できない場合でも対応できます。
